// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2023 20:11:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    division
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module division_vlg_sample_tst(
	A,
	B,
	CLK,
	Start,
	sampler_tx
);
input [31:0] A;
input [31:0] B;
input  CLK;
input  Start;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CLK or Start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module division_vlg_check_tst (
	Done,
	Qu,
	R,
	sampler_rx
);
input  Done;
input [63:0] Qu;
input [63:0] R;
input sampler_rx;

reg  Done_expected;
reg [63:0] Qu_expected;
reg [63:0] R_expected;

reg  Done_prev;
reg [63:0] Qu_prev;
reg [63:0] R_prev;

reg  Done_expected_prev;
reg [63:0] Qu_expected_prev;
reg [63:0] R_expected_prev;

reg  last_Done_exp;
reg [63:0] last_Qu_exp;
reg [63:0] last_R_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Done_prev = Done;
	Qu_prev = Qu;
	R_prev = R;
end

// update expected /o prevs

always @(trigger)
begin
	Done_expected_prev = Done_expected;
	Qu_expected_prev = Qu_expected;
	R_expected_prev = R_expected;
end



// expected Done
initial
begin
	Done_expected = 1'bX;
end 
// expected Qu[ 63 ]
initial
begin
	Qu_expected[63] = 1'bX;
end 
// expected Qu[ 62 ]
initial
begin
	Qu_expected[62] = 1'bX;
end 
// expected Qu[ 61 ]
initial
begin
	Qu_expected[61] = 1'bX;
end 
// expected Qu[ 60 ]
initial
begin
	Qu_expected[60] = 1'bX;
end 
// expected Qu[ 59 ]
initial
begin
	Qu_expected[59] = 1'bX;
end 
// expected Qu[ 58 ]
initial
begin
	Qu_expected[58] = 1'bX;
end 
// expected Qu[ 57 ]
initial
begin
	Qu_expected[57] = 1'bX;
end 
// expected Qu[ 56 ]
initial
begin
	Qu_expected[56] = 1'bX;
end 
// expected Qu[ 55 ]
initial
begin
	Qu_expected[55] = 1'bX;
end 
// expected Qu[ 54 ]
initial
begin
	Qu_expected[54] = 1'bX;
end 
// expected Qu[ 53 ]
initial
begin
	Qu_expected[53] = 1'bX;
end 
// expected Qu[ 52 ]
initial
begin
	Qu_expected[52] = 1'bX;
end 
// expected Qu[ 51 ]
initial
begin
	Qu_expected[51] = 1'bX;
end 
// expected Qu[ 50 ]
initial
begin
	Qu_expected[50] = 1'bX;
end 
// expected Qu[ 49 ]
initial
begin
	Qu_expected[49] = 1'bX;
end 
// expected Qu[ 48 ]
initial
begin
	Qu_expected[48] = 1'bX;
end 
// expected Qu[ 47 ]
initial
begin
	Qu_expected[47] = 1'bX;
end 
// expected Qu[ 46 ]
initial
begin
	Qu_expected[46] = 1'bX;
end 
// expected Qu[ 45 ]
initial
begin
	Qu_expected[45] = 1'bX;
end 
// expected Qu[ 44 ]
initial
begin
	Qu_expected[44] = 1'bX;
end 
// expected Qu[ 43 ]
initial
begin
	Qu_expected[43] = 1'bX;
end 
// expected Qu[ 42 ]
initial
begin
	Qu_expected[42] = 1'bX;
end 
// expected Qu[ 41 ]
initial
begin
	Qu_expected[41] = 1'bX;
end 
// expected Qu[ 40 ]
initial
begin
	Qu_expected[40] = 1'bX;
end 
// expected Qu[ 39 ]
initial
begin
	Qu_expected[39] = 1'bX;
end 
// expected Qu[ 38 ]
initial
begin
	Qu_expected[38] = 1'bX;
end 
// expected Qu[ 37 ]
initial
begin
	Qu_expected[37] = 1'bX;
end 
// expected Qu[ 36 ]
initial
begin
	Qu_expected[36] = 1'bX;
end 
// expected Qu[ 35 ]
initial
begin
	Qu_expected[35] = 1'bX;
end 
// expected Qu[ 34 ]
initial
begin
	Qu_expected[34] = 1'bX;
end 
// expected Qu[ 33 ]
initial
begin
	Qu_expected[33] = 1'bX;
end 
// expected Qu[ 32 ]
initial
begin
	Qu_expected[32] = 1'bX;
end 
// expected Qu[ 31 ]
initial
begin
	Qu_expected[31] = 1'bX;
end 
// expected Qu[ 30 ]
initial
begin
	Qu_expected[30] = 1'bX;
end 
// expected Qu[ 29 ]
initial
begin
	Qu_expected[29] = 1'bX;
end 
// expected Qu[ 28 ]
initial
begin
	Qu_expected[28] = 1'bX;
end 
// expected Qu[ 27 ]
initial
begin
	Qu_expected[27] = 1'bX;
end 
// expected Qu[ 26 ]
initial
begin
	Qu_expected[26] = 1'bX;
end 
// expected Qu[ 25 ]
initial
begin
	Qu_expected[25] = 1'bX;
end 
// expected Qu[ 24 ]
initial
begin
	Qu_expected[24] = 1'bX;
end 
// expected Qu[ 23 ]
initial
begin
	Qu_expected[23] = 1'bX;
end 
// expected Qu[ 22 ]
initial
begin
	Qu_expected[22] = 1'bX;
end 
// expected Qu[ 21 ]
initial
begin
	Qu_expected[21] = 1'bX;
end 
// expected Qu[ 20 ]
initial
begin
	Qu_expected[20] = 1'bX;
end 
// expected Qu[ 19 ]
initial
begin
	Qu_expected[19] = 1'bX;
end 
// expected Qu[ 18 ]
initial
begin
	Qu_expected[18] = 1'bX;
end 
// expected Qu[ 17 ]
initial
begin
	Qu_expected[17] = 1'bX;
end 
// expected Qu[ 16 ]
initial
begin
	Qu_expected[16] = 1'bX;
end 
// expected Qu[ 15 ]
initial
begin
	Qu_expected[15] = 1'bX;
end 
// expected Qu[ 14 ]
initial
begin
	Qu_expected[14] = 1'bX;
end 
// expected Qu[ 13 ]
initial
begin
	Qu_expected[13] = 1'bX;
end 
// expected Qu[ 12 ]
initial
begin
	Qu_expected[12] = 1'bX;
end 
// expected Qu[ 11 ]
initial
begin
	Qu_expected[11] = 1'bX;
end 
// expected Qu[ 10 ]
initial
begin
	Qu_expected[10] = 1'bX;
end 
// expected Qu[ 9 ]
initial
begin
	Qu_expected[9] = 1'bX;
end 
// expected Qu[ 8 ]
initial
begin
	Qu_expected[8] = 1'bX;
end 
// expected Qu[ 7 ]
initial
begin
	Qu_expected[7] = 1'bX;
end 
// expected Qu[ 6 ]
initial
begin
	Qu_expected[6] = 1'bX;
end 
// expected Qu[ 5 ]
initial
begin
	Qu_expected[5] = 1'bX;
end 
// expected Qu[ 4 ]
initial
begin
	Qu_expected[4] = 1'bX;
end 
// expected Qu[ 3 ]
initial
begin
	Qu_expected[3] = 1'bX;
end 
// expected Qu[ 2 ]
initial
begin
	Qu_expected[2] = 1'bX;
end 
// expected Qu[ 1 ]
initial
begin
	Qu_expected[1] = 1'bX;
end 
// expected Qu[ 0 ]
initial
begin
	Qu_expected[0] = 1'bX;
end 
// expected R[ 63 ]
initial
begin
	R_expected[63] = 1'bX;
end 
// expected R[ 62 ]
initial
begin
	R_expected[62] = 1'bX;
end 
// expected R[ 61 ]
initial
begin
	R_expected[61] = 1'bX;
end 
// expected R[ 60 ]
initial
begin
	R_expected[60] = 1'bX;
end 
// expected R[ 59 ]
initial
begin
	R_expected[59] = 1'bX;
end 
// expected R[ 58 ]
initial
begin
	R_expected[58] = 1'bX;
end 
// expected R[ 57 ]
initial
begin
	R_expected[57] = 1'bX;
end 
// expected R[ 56 ]
initial
begin
	R_expected[56] = 1'bX;
end 
// expected R[ 55 ]
initial
begin
	R_expected[55] = 1'bX;
end 
// expected R[ 54 ]
initial
begin
	R_expected[54] = 1'bX;
end 
// expected R[ 53 ]
initial
begin
	R_expected[53] = 1'bX;
end 
// expected R[ 52 ]
initial
begin
	R_expected[52] = 1'bX;
end 
// expected R[ 51 ]
initial
begin
	R_expected[51] = 1'bX;
end 
// expected R[ 50 ]
initial
begin
	R_expected[50] = 1'bX;
end 
// expected R[ 49 ]
initial
begin
	R_expected[49] = 1'bX;
end 
// expected R[ 48 ]
initial
begin
	R_expected[48] = 1'bX;
end 
// expected R[ 47 ]
initial
begin
	R_expected[47] = 1'bX;
end 
// expected R[ 46 ]
initial
begin
	R_expected[46] = 1'bX;
end 
// expected R[ 45 ]
initial
begin
	R_expected[45] = 1'bX;
end 
// expected R[ 44 ]
initial
begin
	R_expected[44] = 1'bX;
end 
// expected R[ 43 ]
initial
begin
	R_expected[43] = 1'bX;
end 
// expected R[ 42 ]
initial
begin
	R_expected[42] = 1'bX;
end 
// expected R[ 41 ]
initial
begin
	R_expected[41] = 1'bX;
end 
// expected R[ 40 ]
initial
begin
	R_expected[40] = 1'bX;
end 
// expected R[ 39 ]
initial
begin
	R_expected[39] = 1'bX;
end 
// expected R[ 38 ]
initial
begin
	R_expected[38] = 1'bX;
end 
// expected R[ 37 ]
initial
begin
	R_expected[37] = 1'bX;
end 
// expected R[ 36 ]
initial
begin
	R_expected[36] = 1'bX;
end 
// expected R[ 35 ]
initial
begin
	R_expected[35] = 1'bX;
end 
// expected R[ 34 ]
initial
begin
	R_expected[34] = 1'bX;
end 
// expected R[ 33 ]
initial
begin
	R_expected[33] = 1'bX;
end 
// expected R[ 32 ]
initial
begin
	R_expected[32] = 1'bX;
end 
// expected R[ 31 ]
initial
begin
	R_expected[31] = 1'bX;
end 
// expected R[ 30 ]
initial
begin
	R_expected[30] = 1'bX;
end 
// expected R[ 29 ]
initial
begin
	R_expected[29] = 1'bX;
end 
// expected R[ 28 ]
initial
begin
	R_expected[28] = 1'bX;
end 
// expected R[ 27 ]
initial
begin
	R_expected[27] = 1'bX;
end 
// expected R[ 26 ]
initial
begin
	R_expected[26] = 1'bX;
end 
// expected R[ 25 ]
initial
begin
	R_expected[25] = 1'bX;
end 
// expected R[ 24 ]
initial
begin
	R_expected[24] = 1'bX;
end 
// expected R[ 23 ]
initial
begin
	R_expected[23] = 1'bX;
end 
// expected R[ 22 ]
initial
begin
	R_expected[22] = 1'bX;
end 
// expected R[ 21 ]
initial
begin
	R_expected[21] = 1'bX;
end 
// expected R[ 20 ]
initial
begin
	R_expected[20] = 1'bX;
end 
// expected R[ 19 ]
initial
begin
	R_expected[19] = 1'bX;
end 
// expected R[ 18 ]
initial
begin
	R_expected[18] = 1'bX;
end 
// expected R[ 17 ]
initial
begin
	R_expected[17] = 1'bX;
end 
// expected R[ 16 ]
initial
begin
	R_expected[16] = 1'bX;
end 
// expected R[ 15 ]
initial
begin
	R_expected[15] = 1'bX;
end 
// expected R[ 14 ]
initial
begin
	R_expected[14] = 1'bX;
end 
// expected R[ 13 ]
initial
begin
	R_expected[13] = 1'bX;
end 
// expected R[ 12 ]
initial
begin
	R_expected[12] = 1'bX;
end 
// expected R[ 11 ]
initial
begin
	R_expected[11] = 1'bX;
end 
// expected R[ 10 ]
initial
begin
	R_expected[10] = 1'bX;
end 
// expected R[ 9 ]
initial
begin
	R_expected[9] = 1'bX;
end 
// expected R[ 8 ]
initial
begin
	R_expected[8] = 1'bX;
end 
// expected R[ 7 ]
initial
begin
	R_expected[7] = 1'bX;
end 
// expected R[ 6 ]
initial
begin
	R_expected[6] = 1'bX;
end 
// expected R[ 5 ]
initial
begin
	R_expected[5] = 1'bX;
end 
// expected R[ 4 ]
initial
begin
	R_expected[4] = 1'bX;
end 
// expected R[ 3 ]
initial
begin
	R_expected[3] = 1'bX;
end 
// expected R[ 2 ]
initial
begin
	R_expected[2] = 1'bX;
end 
// expected R[ 1 ]
initial
begin
	R_expected[1] = 1'bX;
end 
// expected R[ 0 ]
initial
begin
	R_expected[0] = 1'bX;
end 
// generate trigger
always @(Done_expected or Done or Qu_expected or Qu or R_expected or R)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Done = %b | expected Qu = %b | expected R = %b | ",Done_expected_prev,Qu_expected_prev,R_expected_prev);
	$display("| real Done = %b | real Qu = %b | real R = %b | ",Done_prev,Qu_prev,R_prev);
`endif
	if (
		( Done_expected_prev !== 1'bx ) && ( Done_prev !== Done_expected_prev )
		&& ((Done_expected_prev !== last_Done_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Done_expected_prev);
		$display ("     Real value = %b", Done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Done_exp = Done_expected_prev;
	end
	if (
		( Qu_expected_prev[0] !== 1'bx ) && ( Qu_prev[0] !== Qu_expected_prev[0] )
		&& ((Qu_expected_prev[0] !== last_Qu_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[0] = Qu_expected_prev[0];
	end
	if (
		( Qu_expected_prev[1] !== 1'bx ) && ( Qu_prev[1] !== Qu_expected_prev[1] )
		&& ((Qu_expected_prev[1] !== last_Qu_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[1] = Qu_expected_prev[1];
	end
	if (
		( Qu_expected_prev[2] !== 1'bx ) && ( Qu_prev[2] !== Qu_expected_prev[2] )
		&& ((Qu_expected_prev[2] !== last_Qu_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[2] = Qu_expected_prev[2];
	end
	if (
		( Qu_expected_prev[3] !== 1'bx ) && ( Qu_prev[3] !== Qu_expected_prev[3] )
		&& ((Qu_expected_prev[3] !== last_Qu_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[3] = Qu_expected_prev[3];
	end
	if (
		( Qu_expected_prev[4] !== 1'bx ) && ( Qu_prev[4] !== Qu_expected_prev[4] )
		&& ((Qu_expected_prev[4] !== last_Qu_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[4] = Qu_expected_prev[4];
	end
	if (
		( Qu_expected_prev[5] !== 1'bx ) && ( Qu_prev[5] !== Qu_expected_prev[5] )
		&& ((Qu_expected_prev[5] !== last_Qu_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[5] = Qu_expected_prev[5];
	end
	if (
		( Qu_expected_prev[6] !== 1'bx ) && ( Qu_prev[6] !== Qu_expected_prev[6] )
		&& ((Qu_expected_prev[6] !== last_Qu_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[6] = Qu_expected_prev[6];
	end
	if (
		( Qu_expected_prev[7] !== 1'bx ) && ( Qu_prev[7] !== Qu_expected_prev[7] )
		&& ((Qu_expected_prev[7] !== last_Qu_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[7] = Qu_expected_prev[7];
	end
	if (
		( Qu_expected_prev[8] !== 1'bx ) && ( Qu_prev[8] !== Qu_expected_prev[8] )
		&& ((Qu_expected_prev[8] !== last_Qu_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[8] = Qu_expected_prev[8];
	end
	if (
		( Qu_expected_prev[9] !== 1'bx ) && ( Qu_prev[9] !== Qu_expected_prev[9] )
		&& ((Qu_expected_prev[9] !== last_Qu_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[9] = Qu_expected_prev[9];
	end
	if (
		( Qu_expected_prev[10] !== 1'bx ) && ( Qu_prev[10] !== Qu_expected_prev[10] )
		&& ((Qu_expected_prev[10] !== last_Qu_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[10] = Qu_expected_prev[10];
	end
	if (
		( Qu_expected_prev[11] !== 1'bx ) && ( Qu_prev[11] !== Qu_expected_prev[11] )
		&& ((Qu_expected_prev[11] !== last_Qu_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[11] = Qu_expected_prev[11];
	end
	if (
		( Qu_expected_prev[12] !== 1'bx ) && ( Qu_prev[12] !== Qu_expected_prev[12] )
		&& ((Qu_expected_prev[12] !== last_Qu_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[12] = Qu_expected_prev[12];
	end
	if (
		( Qu_expected_prev[13] !== 1'bx ) && ( Qu_prev[13] !== Qu_expected_prev[13] )
		&& ((Qu_expected_prev[13] !== last_Qu_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[13] = Qu_expected_prev[13];
	end
	if (
		( Qu_expected_prev[14] !== 1'bx ) && ( Qu_prev[14] !== Qu_expected_prev[14] )
		&& ((Qu_expected_prev[14] !== last_Qu_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[14] = Qu_expected_prev[14];
	end
	if (
		( Qu_expected_prev[15] !== 1'bx ) && ( Qu_prev[15] !== Qu_expected_prev[15] )
		&& ((Qu_expected_prev[15] !== last_Qu_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[15] = Qu_expected_prev[15];
	end
	if (
		( Qu_expected_prev[16] !== 1'bx ) && ( Qu_prev[16] !== Qu_expected_prev[16] )
		&& ((Qu_expected_prev[16] !== last_Qu_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[16] = Qu_expected_prev[16];
	end
	if (
		( Qu_expected_prev[17] !== 1'bx ) && ( Qu_prev[17] !== Qu_expected_prev[17] )
		&& ((Qu_expected_prev[17] !== last_Qu_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[17] = Qu_expected_prev[17];
	end
	if (
		( Qu_expected_prev[18] !== 1'bx ) && ( Qu_prev[18] !== Qu_expected_prev[18] )
		&& ((Qu_expected_prev[18] !== last_Qu_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[18] = Qu_expected_prev[18];
	end
	if (
		( Qu_expected_prev[19] !== 1'bx ) && ( Qu_prev[19] !== Qu_expected_prev[19] )
		&& ((Qu_expected_prev[19] !== last_Qu_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[19] = Qu_expected_prev[19];
	end
	if (
		( Qu_expected_prev[20] !== 1'bx ) && ( Qu_prev[20] !== Qu_expected_prev[20] )
		&& ((Qu_expected_prev[20] !== last_Qu_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[20] = Qu_expected_prev[20];
	end
	if (
		( Qu_expected_prev[21] !== 1'bx ) && ( Qu_prev[21] !== Qu_expected_prev[21] )
		&& ((Qu_expected_prev[21] !== last_Qu_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[21] = Qu_expected_prev[21];
	end
	if (
		( Qu_expected_prev[22] !== 1'bx ) && ( Qu_prev[22] !== Qu_expected_prev[22] )
		&& ((Qu_expected_prev[22] !== last_Qu_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[22] = Qu_expected_prev[22];
	end
	if (
		( Qu_expected_prev[23] !== 1'bx ) && ( Qu_prev[23] !== Qu_expected_prev[23] )
		&& ((Qu_expected_prev[23] !== last_Qu_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[23] = Qu_expected_prev[23];
	end
	if (
		( Qu_expected_prev[24] !== 1'bx ) && ( Qu_prev[24] !== Qu_expected_prev[24] )
		&& ((Qu_expected_prev[24] !== last_Qu_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[24] = Qu_expected_prev[24];
	end
	if (
		( Qu_expected_prev[25] !== 1'bx ) && ( Qu_prev[25] !== Qu_expected_prev[25] )
		&& ((Qu_expected_prev[25] !== last_Qu_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[25] = Qu_expected_prev[25];
	end
	if (
		( Qu_expected_prev[26] !== 1'bx ) && ( Qu_prev[26] !== Qu_expected_prev[26] )
		&& ((Qu_expected_prev[26] !== last_Qu_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[26] = Qu_expected_prev[26];
	end
	if (
		( Qu_expected_prev[27] !== 1'bx ) && ( Qu_prev[27] !== Qu_expected_prev[27] )
		&& ((Qu_expected_prev[27] !== last_Qu_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[27] = Qu_expected_prev[27];
	end
	if (
		( Qu_expected_prev[28] !== 1'bx ) && ( Qu_prev[28] !== Qu_expected_prev[28] )
		&& ((Qu_expected_prev[28] !== last_Qu_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[28] = Qu_expected_prev[28];
	end
	if (
		( Qu_expected_prev[29] !== 1'bx ) && ( Qu_prev[29] !== Qu_expected_prev[29] )
		&& ((Qu_expected_prev[29] !== last_Qu_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[29] = Qu_expected_prev[29];
	end
	if (
		( Qu_expected_prev[30] !== 1'bx ) && ( Qu_prev[30] !== Qu_expected_prev[30] )
		&& ((Qu_expected_prev[30] !== last_Qu_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[30] = Qu_expected_prev[30];
	end
	if (
		( Qu_expected_prev[31] !== 1'bx ) && ( Qu_prev[31] !== Qu_expected_prev[31] )
		&& ((Qu_expected_prev[31] !== last_Qu_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[31] = Qu_expected_prev[31];
	end
	if (
		( Qu_expected_prev[32] !== 1'bx ) && ( Qu_prev[32] !== Qu_expected_prev[32] )
		&& ((Qu_expected_prev[32] !== last_Qu_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[32] = Qu_expected_prev[32];
	end
	if (
		( Qu_expected_prev[33] !== 1'bx ) && ( Qu_prev[33] !== Qu_expected_prev[33] )
		&& ((Qu_expected_prev[33] !== last_Qu_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[33] = Qu_expected_prev[33];
	end
	if (
		( Qu_expected_prev[34] !== 1'bx ) && ( Qu_prev[34] !== Qu_expected_prev[34] )
		&& ((Qu_expected_prev[34] !== last_Qu_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[34] = Qu_expected_prev[34];
	end
	if (
		( Qu_expected_prev[35] !== 1'bx ) && ( Qu_prev[35] !== Qu_expected_prev[35] )
		&& ((Qu_expected_prev[35] !== last_Qu_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[35] = Qu_expected_prev[35];
	end
	if (
		( Qu_expected_prev[36] !== 1'bx ) && ( Qu_prev[36] !== Qu_expected_prev[36] )
		&& ((Qu_expected_prev[36] !== last_Qu_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[36] = Qu_expected_prev[36];
	end
	if (
		( Qu_expected_prev[37] !== 1'bx ) && ( Qu_prev[37] !== Qu_expected_prev[37] )
		&& ((Qu_expected_prev[37] !== last_Qu_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[37] = Qu_expected_prev[37];
	end
	if (
		( Qu_expected_prev[38] !== 1'bx ) && ( Qu_prev[38] !== Qu_expected_prev[38] )
		&& ((Qu_expected_prev[38] !== last_Qu_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[38] = Qu_expected_prev[38];
	end
	if (
		( Qu_expected_prev[39] !== 1'bx ) && ( Qu_prev[39] !== Qu_expected_prev[39] )
		&& ((Qu_expected_prev[39] !== last_Qu_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[39] = Qu_expected_prev[39];
	end
	if (
		( Qu_expected_prev[40] !== 1'bx ) && ( Qu_prev[40] !== Qu_expected_prev[40] )
		&& ((Qu_expected_prev[40] !== last_Qu_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[40] = Qu_expected_prev[40];
	end
	if (
		( Qu_expected_prev[41] !== 1'bx ) && ( Qu_prev[41] !== Qu_expected_prev[41] )
		&& ((Qu_expected_prev[41] !== last_Qu_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[41] = Qu_expected_prev[41];
	end
	if (
		( Qu_expected_prev[42] !== 1'bx ) && ( Qu_prev[42] !== Qu_expected_prev[42] )
		&& ((Qu_expected_prev[42] !== last_Qu_exp[42]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[42] = Qu_expected_prev[42];
	end
	if (
		( Qu_expected_prev[43] !== 1'bx ) && ( Qu_prev[43] !== Qu_expected_prev[43] )
		&& ((Qu_expected_prev[43] !== last_Qu_exp[43]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[43] = Qu_expected_prev[43];
	end
	if (
		( Qu_expected_prev[44] !== 1'bx ) && ( Qu_prev[44] !== Qu_expected_prev[44] )
		&& ((Qu_expected_prev[44] !== last_Qu_exp[44]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[44] = Qu_expected_prev[44];
	end
	if (
		( Qu_expected_prev[45] !== 1'bx ) && ( Qu_prev[45] !== Qu_expected_prev[45] )
		&& ((Qu_expected_prev[45] !== last_Qu_exp[45]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[45] = Qu_expected_prev[45];
	end
	if (
		( Qu_expected_prev[46] !== 1'bx ) && ( Qu_prev[46] !== Qu_expected_prev[46] )
		&& ((Qu_expected_prev[46] !== last_Qu_exp[46]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[46] = Qu_expected_prev[46];
	end
	if (
		( Qu_expected_prev[47] !== 1'bx ) && ( Qu_prev[47] !== Qu_expected_prev[47] )
		&& ((Qu_expected_prev[47] !== last_Qu_exp[47]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[47] = Qu_expected_prev[47];
	end
	if (
		( Qu_expected_prev[48] !== 1'bx ) && ( Qu_prev[48] !== Qu_expected_prev[48] )
		&& ((Qu_expected_prev[48] !== last_Qu_exp[48]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[48] = Qu_expected_prev[48];
	end
	if (
		( Qu_expected_prev[49] !== 1'bx ) && ( Qu_prev[49] !== Qu_expected_prev[49] )
		&& ((Qu_expected_prev[49] !== last_Qu_exp[49]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[49] = Qu_expected_prev[49];
	end
	if (
		( Qu_expected_prev[50] !== 1'bx ) && ( Qu_prev[50] !== Qu_expected_prev[50] )
		&& ((Qu_expected_prev[50] !== last_Qu_exp[50]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[50] = Qu_expected_prev[50];
	end
	if (
		( Qu_expected_prev[51] !== 1'bx ) && ( Qu_prev[51] !== Qu_expected_prev[51] )
		&& ((Qu_expected_prev[51] !== last_Qu_exp[51]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[51] = Qu_expected_prev[51];
	end
	if (
		( Qu_expected_prev[52] !== 1'bx ) && ( Qu_prev[52] !== Qu_expected_prev[52] )
		&& ((Qu_expected_prev[52] !== last_Qu_exp[52]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[52] = Qu_expected_prev[52];
	end
	if (
		( Qu_expected_prev[53] !== 1'bx ) && ( Qu_prev[53] !== Qu_expected_prev[53] )
		&& ((Qu_expected_prev[53] !== last_Qu_exp[53]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[53] = Qu_expected_prev[53];
	end
	if (
		( Qu_expected_prev[54] !== 1'bx ) && ( Qu_prev[54] !== Qu_expected_prev[54] )
		&& ((Qu_expected_prev[54] !== last_Qu_exp[54]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[54] = Qu_expected_prev[54];
	end
	if (
		( Qu_expected_prev[55] !== 1'bx ) && ( Qu_prev[55] !== Qu_expected_prev[55] )
		&& ((Qu_expected_prev[55] !== last_Qu_exp[55]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[55] = Qu_expected_prev[55];
	end
	if (
		( Qu_expected_prev[56] !== 1'bx ) && ( Qu_prev[56] !== Qu_expected_prev[56] )
		&& ((Qu_expected_prev[56] !== last_Qu_exp[56]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[56] = Qu_expected_prev[56];
	end
	if (
		( Qu_expected_prev[57] !== 1'bx ) && ( Qu_prev[57] !== Qu_expected_prev[57] )
		&& ((Qu_expected_prev[57] !== last_Qu_exp[57]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[57] = Qu_expected_prev[57];
	end
	if (
		( Qu_expected_prev[58] !== 1'bx ) && ( Qu_prev[58] !== Qu_expected_prev[58] )
		&& ((Qu_expected_prev[58] !== last_Qu_exp[58]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[58] = Qu_expected_prev[58];
	end
	if (
		( Qu_expected_prev[59] !== 1'bx ) && ( Qu_prev[59] !== Qu_expected_prev[59] )
		&& ((Qu_expected_prev[59] !== last_Qu_exp[59]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[59] = Qu_expected_prev[59];
	end
	if (
		( Qu_expected_prev[60] !== 1'bx ) && ( Qu_prev[60] !== Qu_expected_prev[60] )
		&& ((Qu_expected_prev[60] !== last_Qu_exp[60]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[60] = Qu_expected_prev[60];
	end
	if (
		( Qu_expected_prev[61] !== 1'bx ) && ( Qu_prev[61] !== Qu_expected_prev[61] )
		&& ((Qu_expected_prev[61] !== last_Qu_exp[61]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[61] = Qu_expected_prev[61];
	end
	if (
		( Qu_expected_prev[62] !== 1'bx ) && ( Qu_prev[62] !== Qu_expected_prev[62] )
		&& ((Qu_expected_prev[62] !== last_Qu_exp[62]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[62] = Qu_expected_prev[62];
	end
	if (
		( Qu_expected_prev[63] !== 1'bx ) && ( Qu_prev[63] !== Qu_expected_prev[63] )
		&& ((Qu_expected_prev[63] !== last_Qu_exp[63]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qu[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qu_expected_prev);
		$display ("     Real value = %b", Qu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qu_exp[63] = Qu_expected_prev[63];
	end
	if (
		( R_expected_prev[0] !== 1'bx ) && ( R_prev[0] !== R_expected_prev[0] )
		&& ((R_expected_prev[0] !== last_R_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[0] = R_expected_prev[0];
	end
	if (
		( R_expected_prev[1] !== 1'bx ) && ( R_prev[1] !== R_expected_prev[1] )
		&& ((R_expected_prev[1] !== last_R_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[1] = R_expected_prev[1];
	end
	if (
		( R_expected_prev[2] !== 1'bx ) && ( R_prev[2] !== R_expected_prev[2] )
		&& ((R_expected_prev[2] !== last_R_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[2] = R_expected_prev[2];
	end
	if (
		( R_expected_prev[3] !== 1'bx ) && ( R_prev[3] !== R_expected_prev[3] )
		&& ((R_expected_prev[3] !== last_R_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[3] = R_expected_prev[3];
	end
	if (
		( R_expected_prev[4] !== 1'bx ) && ( R_prev[4] !== R_expected_prev[4] )
		&& ((R_expected_prev[4] !== last_R_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[4] = R_expected_prev[4];
	end
	if (
		( R_expected_prev[5] !== 1'bx ) && ( R_prev[5] !== R_expected_prev[5] )
		&& ((R_expected_prev[5] !== last_R_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[5] = R_expected_prev[5];
	end
	if (
		( R_expected_prev[6] !== 1'bx ) && ( R_prev[6] !== R_expected_prev[6] )
		&& ((R_expected_prev[6] !== last_R_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[6] = R_expected_prev[6];
	end
	if (
		( R_expected_prev[7] !== 1'bx ) && ( R_prev[7] !== R_expected_prev[7] )
		&& ((R_expected_prev[7] !== last_R_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[7] = R_expected_prev[7];
	end
	if (
		( R_expected_prev[8] !== 1'bx ) && ( R_prev[8] !== R_expected_prev[8] )
		&& ((R_expected_prev[8] !== last_R_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[8] = R_expected_prev[8];
	end
	if (
		( R_expected_prev[9] !== 1'bx ) && ( R_prev[9] !== R_expected_prev[9] )
		&& ((R_expected_prev[9] !== last_R_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[9] = R_expected_prev[9];
	end
	if (
		( R_expected_prev[10] !== 1'bx ) && ( R_prev[10] !== R_expected_prev[10] )
		&& ((R_expected_prev[10] !== last_R_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[10] = R_expected_prev[10];
	end
	if (
		( R_expected_prev[11] !== 1'bx ) && ( R_prev[11] !== R_expected_prev[11] )
		&& ((R_expected_prev[11] !== last_R_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[11] = R_expected_prev[11];
	end
	if (
		( R_expected_prev[12] !== 1'bx ) && ( R_prev[12] !== R_expected_prev[12] )
		&& ((R_expected_prev[12] !== last_R_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[12] = R_expected_prev[12];
	end
	if (
		( R_expected_prev[13] !== 1'bx ) && ( R_prev[13] !== R_expected_prev[13] )
		&& ((R_expected_prev[13] !== last_R_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[13] = R_expected_prev[13];
	end
	if (
		( R_expected_prev[14] !== 1'bx ) && ( R_prev[14] !== R_expected_prev[14] )
		&& ((R_expected_prev[14] !== last_R_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[14] = R_expected_prev[14];
	end
	if (
		( R_expected_prev[15] !== 1'bx ) && ( R_prev[15] !== R_expected_prev[15] )
		&& ((R_expected_prev[15] !== last_R_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[15] = R_expected_prev[15];
	end
	if (
		( R_expected_prev[16] !== 1'bx ) && ( R_prev[16] !== R_expected_prev[16] )
		&& ((R_expected_prev[16] !== last_R_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[16] = R_expected_prev[16];
	end
	if (
		( R_expected_prev[17] !== 1'bx ) && ( R_prev[17] !== R_expected_prev[17] )
		&& ((R_expected_prev[17] !== last_R_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[17] = R_expected_prev[17];
	end
	if (
		( R_expected_prev[18] !== 1'bx ) && ( R_prev[18] !== R_expected_prev[18] )
		&& ((R_expected_prev[18] !== last_R_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[18] = R_expected_prev[18];
	end
	if (
		( R_expected_prev[19] !== 1'bx ) && ( R_prev[19] !== R_expected_prev[19] )
		&& ((R_expected_prev[19] !== last_R_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[19] = R_expected_prev[19];
	end
	if (
		( R_expected_prev[20] !== 1'bx ) && ( R_prev[20] !== R_expected_prev[20] )
		&& ((R_expected_prev[20] !== last_R_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[20] = R_expected_prev[20];
	end
	if (
		( R_expected_prev[21] !== 1'bx ) && ( R_prev[21] !== R_expected_prev[21] )
		&& ((R_expected_prev[21] !== last_R_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[21] = R_expected_prev[21];
	end
	if (
		( R_expected_prev[22] !== 1'bx ) && ( R_prev[22] !== R_expected_prev[22] )
		&& ((R_expected_prev[22] !== last_R_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[22] = R_expected_prev[22];
	end
	if (
		( R_expected_prev[23] !== 1'bx ) && ( R_prev[23] !== R_expected_prev[23] )
		&& ((R_expected_prev[23] !== last_R_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[23] = R_expected_prev[23];
	end
	if (
		( R_expected_prev[24] !== 1'bx ) && ( R_prev[24] !== R_expected_prev[24] )
		&& ((R_expected_prev[24] !== last_R_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[24] = R_expected_prev[24];
	end
	if (
		( R_expected_prev[25] !== 1'bx ) && ( R_prev[25] !== R_expected_prev[25] )
		&& ((R_expected_prev[25] !== last_R_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[25] = R_expected_prev[25];
	end
	if (
		( R_expected_prev[26] !== 1'bx ) && ( R_prev[26] !== R_expected_prev[26] )
		&& ((R_expected_prev[26] !== last_R_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[26] = R_expected_prev[26];
	end
	if (
		( R_expected_prev[27] !== 1'bx ) && ( R_prev[27] !== R_expected_prev[27] )
		&& ((R_expected_prev[27] !== last_R_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[27] = R_expected_prev[27];
	end
	if (
		( R_expected_prev[28] !== 1'bx ) && ( R_prev[28] !== R_expected_prev[28] )
		&& ((R_expected_prev[28] !== last_R_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[28] = R_expected_prev[28];
	end
	if (
		( R_expected_prev[29] !== 1'bx ) && ( R_prev[29] !== R_expected_prev[29] )
		&& ((R_expected_prev[29] !== last_R_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[29] = R_expected_prev[29];
	end
	if (
		( R_expected_prev[30] !== 1'bx ) && ( R_prev[30] !== R_expected_prev[30] )
		&& ((R_expected_prev[30] !== last_R_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[30] = R_expected_prev[30];
	end
	if (
		( R_expected_prev[31] !== 1'bx ) && ( R_prev[31] !== R_expected_prev[31] )
		&& ((R_expected_prev[31] !== last_R_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[31] = R_expected_prev[31];
	end
	if (
		( R_expected_prev[32] !== 1'bx ) && ( R_prev[32] !== R_expected_prev[32] )
		&& ((R_expected_prev[32] !== last_R_exp[32]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[32] = R_expected_prev[32];
	end
	if (
		( R_expected_prev[33] !== 1'bx ) && ( R_prev[33] !== R_expected_prev[33] )
		&& ((R_expected_prev[33] !== last_R_exp[33]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[33] = R_expected_prev[33];
	end
	if (
		( R_expected_prev[34] !== 1'bx ) && ( R_prev[34] !== R_expected_prev[34] )
		&& ((R_expected_prev[34] !== last_R_exp[34]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[34] = R_expected_prev[34];
	end
	if (
		( R_expected_prev[35] !== 1'bx ) && ( R_prev[35] !== R_expected_prev[35] )
		&& ((R_expected_prev[35] !== last_R_exp[35]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[35] = R_expected_prev[35];
	end
	if (
		( R_expected_prev[36] !== 1'bx ) && ( R_prev[36] !== R_expected_prev[36] )
		&& ((R_expected_prev[36] !== last_R_exp[36]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[36] = R_expected_prev[36];
	end
	if (
		( R_expected_prev[37] !== 1'bx ) && ( R_prev[37] !== R_expected_prev[37] )
		&& ((R_expected_prev[37] !== last_R_exp[37]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[37] = R_expected_prev[37];
	end
	if (
		( R_expected_prev[38] !== 1'bx ) && ( R_prev[38] !== R_expected_prev[38] )
		&& ((R_expected_prev[38] !== last_R_exp[38]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[38] = R_expected_prev[38];
	end
	if (
		( R_expected_prev[39] !== 1'bx ) && ( R_prev[39] !== R_expected_prev[39] )
		&& ((R_expected_prev[39] !== last_R_exp[39]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[39] = R_expected_prev[39];
	end
	if (
		( R_expected_prev[40] !== 1'bx ) && ( R_prev[40] !== R_expected_prev[40] )
		&& ((R_expected_prev[40] !== last_R_exp[40]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[40] = R_expected_prev[40];
	end
	if (
		( R_expected_prev[41] !== 1'bx ) && ( R_prev[41] !== R_expected_prev[41] )
		&& ((R_expected_prev[41] !== last_R_exp[41]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[41] = R_expected_prev[41];
	end
	if (
		( R_expected_prev[42] !== 1'bx ) && ( R_prev[42] !== R_expected_prev[42] )
		&& ((R_expected_prev[42] !== last_R_exp[42]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[42] = R_expected_prev[42];
	end
	if (
		( R_expected_prev[43] !== 1'bx ) && ( R_prev[43] !== R_expected_prev[43] )
		&& ((R_expected_prev[43] !== last_R_exp[43]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[43] = R_expected_prev[43];
	end
	if (
		( R_expected_prev[44] !== 1'bx ) && ( R_prev[44] !== R_expected_prev[44] )
		&& ((R_expected_prev[44] !== last_R_exp[44]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[44] = R_expected_prev[44];
	end
	if (
		( R_expected_prev[45] !== 1'bx ) && ( R_prev[45] !== R_expected_prev[45] )
		&& ((R_expected_prev[45] !== last_R_exp[45]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[45] = R_expected_prev[45];
	end
	if (
		( R_expected_prev[46] !== 1'bx ) && ( R_prev[46] !== R_expected_prev[46] )
		&& ((R_expected_prev[46] !== last_R_exp[46]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[46] = R_expected_prev[46];
	end
	if (
		( R_expected_prev[47] !== 1'bx ) && ( R_prev[47] !== R_expected_prev[47] )
		&& ((R_expected_prev[47] !== last_R_exp[47]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[47] = R_expected_prev[47];
	end
	if (
		( R_expected_prev[48] !== 1'bx ) && ( R_prev[48] !== R_expected_prev[48] )
		&& ((R_expected_prev[48] !== last_R_exp[48]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[48] = R_expected_prev[48];
	end
	if (
		( R_expected_prev[49] !== 1'bx ) && ( R_prev[49] !== R_expected_prev[49] )
		&& ((R_expected_prev[49] !== last_R_exp[49]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[49] = R_expected_prev[49];
	end
	if (
		( R_expected_prev[50] !== 1'bx ) && ( R_prev[50] !== R_expected_prev[50] )
		&& ((R_expected_prev[50] !== last_R_exp[50]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[50] = R_expected_prev[50];
	end
	if (
		( R_expected_prev[51] !== 1'bx ) && ( R_prev[51] !== R_expected_prev[51] )
		&& ((R_expected_prev[51] !== last_R_exp[51]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[51] = R_expected_prev[51];
	end
	if (
		( R_expected_prev[52] !== 1'bx ) && ( R_prev[52] !== R_expected_prev[52] )
		&& ((R_expected_prev[52] !== last_R_exp[52]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[52] = R_expected_prev[52];
	end
	if (
		( R_expected_prev[53] !== 1'bx ) && ( R_prev[53] !== R_expected_prev[53] )
		&& ((R_expected_prev[53] !== last_R_exp[53]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[53] = R_expected_prev[53];
	end
	if (
		( R_expected_prev[54] !== 1'bx ) && ( R_prev[54] !== R_expected_prev[54] )
		&& ((R_expected_prev[54] !== last_R_exp[54]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[54] = R_expected_prev[54];
	end
	if (
		( R_expected_prev[55] !== 1'bx ) && ( R_prev[55] !== R_expected_prev[55] )
		&& ((R_expected_prev[55] !== last_R_exp[55]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[55] = R_expected_prev[55];
	end
	if (
		( R_expected_prev[56] !== 1'bx ) && ( R_prev[56] !== R_expected_prev[56] )
		&& ((R_expected_prev[56] !== last_R_exp[56]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[56] = R_expected_prev[56];
	end
	if (
		( R_expected_prev[57] !== 1'bx ) && ( R_prev[57] !== R_expected_prev[57] )
		&& ((R_expected_prev[57] !== last_R_exp[57]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[57] = R_expected_prev[57];
	end
	if (
		( R_expected_prev[58] !== 1'bx ) && ( R_prev[58] !== R_expected_prev[58] )
		&& ((R_expected_prev[58] !== last_R_exp[58]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[58] = R_expected_prev[58];
	end
	if (
		( R_expected_prev[59] !== 1'bx ) && ( R_prev[59] !== R_expected_prev[59] )
		&& ((R_expected_prev[59] !== last_R_exp[59]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[59] = R_expected_prev[59];
	end
	if (
		( R_expected_prev[60] !== 1'bx ) && ( R_prev[60] !== R_expected_prev[60] )
		&& ((R_expected_prev[60] !== last_R_exp[60]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[60] = R_expected_prev[60];
	end
	if (
		( R_expected_prev[61] !== 1'bx ) && ( R_prev[61] !== R_expected_prev[61] )
		&& ((R_expected_prev[61] !== last_R_exp[61]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[61] = R_expected_prev[61];
	end
	if (
		( R_expected_prev[62] !== 1'bx ) && ( R_prev[62] !== R_expected_prev[62] )
		&& ((R_expected_prev[62] !== last_R_exp[62]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[62] = R_expected_prev[62];
	end
	if (
		( R_expected_prev[63] !== 1'bx ) && ( R_prev[63] !== R_expected_prev[63] )
		&& ((R_expected_prev[63] !== last_R_exp[63]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[63] = R_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module division_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
reg CLK;
reg Start;
// wires                                               
wire Done;
wire [63:0] Qu;
wire [63:0] R;

wire sampler;                             

// assign statements (if any)                          
division i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLK(CLK),
	.Done(Done),
	.Qu(Qu),
	.R(R),
	.Start(Start)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #2500 1'b1;
	#2500;
end 

// Start
initial
begin
	Start = 1'b1;
	Start = #10000 1'b0;
end 
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b1;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b1;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b1;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

division_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CLK(CLK),
	.Start(Start),
	.sampler_tx(sampler)
);

division_vlg_check_tst tb_out(
	.Done(Done),
	.Qu(Qu),
	.R(R),
	.sampler_rx(sampler)
);
endmodule

